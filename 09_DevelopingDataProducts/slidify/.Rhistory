modelFit <- train(trainPred~., method = "glm", data = trainData)
test <- predict(preProc, testData)
confusionMatrix(testPred, predict(modelFit, test))
modelFit <- train(trainPred~., method = "glm", data = trainData)
confusionMatrix(testPred, predict(modelFit, test))
confusionMatrix(testPred, predict(modelFit, testData))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
varName <- names(training)
data4 <- training[, grep('^IL', varName, perl=TRUE)]
preProcess(data4, thresh = 0.9)
preProcess(data4, method = "pca", thresh = 0.9)
install.packsages("kernlab")
install.packages("kernlab")
data(mtcars)
fit <- lm(mpg ~ wt, facet = cyl, data = mtcars)
View(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
fit
summary(fit)
plot(mpg ~ wt, data = mtcars)
plot(mpg ~ cyl, data = mtcars)
plot(mpg ~ wt, data = mtcars)
plot(mpg ~ cyl, data = mtcars)
fit <- lm(mpg ~ wt + cyl, data = mtcars)
summary(fit)
fit1 <- lm(mpg ~ wt + cyl, data = mtcars)
fit2 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(fit1)
summary(fit2)
cyl
mtcars￥cyl
mtcars$cyl
fit2 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
summary(fit2)
factor(mtcars$cyl)
plot(mpg ~ wt, color = cyl, data = mtcars))
plot(mpg ~ wt, color = cyl, data = mtcars)
qplot(mpg ~ wt, color = cyl, data = mtcars)
library(ggplot2)
qplot(mpg ~ wt, color = cyl, data = mtcars)
# 1
qplot(mpg ~wt, color = cyl, data = mtcars)
qplot(mpg~wt, color = cyl, data = mtcars)
qplot(mpg, wt, color = cyl, data = mtcars)
fit1 <- lm(mpg ~ wt + cyl, data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(fit2)
fit31 <- lm(mpg ~ wt + factor(cyl) + wt:cyl, data = mtcars)
summary(fit31)
fit31 <- fit1
summary(fit31)
fit1 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(fit1)
fit31 <- fit1
summary(fit31)
fit32 <- lm(mpg ~ wt + factor(cyl) + wt:cyl, data = mtcars)
summary(fit32)
lrtest(fit31, fit32)
library(lmtest)
lrtest(fit31, fit32)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
influence(fit5)
dfbetas(fit5)
fit1 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(fit1)
library(lmtest)
data(mtcars)
fit31 <- fit1
summary(fit31)
fit32 <- lm(mpg ~ wt + factor(cyl) + wt:cyl, data = mtcars)
summary(fit32)
lrtest(fit31, fit32)
fit32 <- lm(mpg ~ wt + factor(cyl) + wt:factor(cyl), data = mtcars)
summary(fit32)
lrtest(fit31, fit32)
dfbetas(fit6)
fit6 <- fit5
dfbetas(fit6)
plot(y,x)
plot(x,y)
x <- c(0.586, 0.166, -0.042, -0.614)
y <- c(0.549, -0.026, -0.127, -0.751)
fit5 <- lm(y ~ x)
influence(fit5)
summary(fit5)
head(shuttle\)
head(shuttle)
library(MASS)
data(shuttle)
head(shuttle)
fit1 <- glm(use ~ head, data = shuttle, family = "binomial")
fit1 <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit1)
predict(fit1)
plot(use, wind ,data = shuffle)
plot(use, wind ,data = shuttle)
plot(use ~ wind ,data = shuttle)
head(shuttle)
predict(fit1)
OddsRatio(predict(fit1))
library("HH", lib.loc="D:/Program Files/R/R-3.1.0/library")
OddsRatio(predict(fit1))
OddsRatio([wind, predict(fit1)])
OddsRatio(data.frame(wind, predict(fit1)))
OddsRatio(data.frame(shuttle$wind, predict(fit1)))
predict(fit1)
View(shuttle)
predict(fit1, wind, data = shuttle)
predict(fit1, shuttle$wind)
fit1 <- glm(use ~ as.factor(wind), data = shuttle, family = "binomial")
summary(fit1)
predict(fit1)
predict(fit1) > 0
(
sum(predict(fit1) > 0)
)
1/255
2/254
3/253
4/252
6/250
16/240
9/247
8/248
7/249
fit1 <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit1)
fit1 <- glm(use ~ as.numeric(wind), data = shuttle, family = "binomial")
summary(fit1)
sum(predict(fit1) > 0)
fit1 <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit1)
shuttle(wind)
shuttle$wind
sum(shuttle$wind)
table(use, wind, data = shuttle)
table(shuttle$use, shuttle$wind)
fit1 <- glm(as.numeric(use) ~ as.numeric(wind), data = shuttle, family = "binomial")
fit1 <- glm(as.numeric(use) ~ as.numeric(wind), data = shuttle, family = binomial)
fit1 <- glm(use ~ wind, data = shuttle, family = binomial)
summary(fit1)
sum(predict(fit1) > 0)
fit1 <- glm(use ~ wind, data = shuttle, family = binomial)
summary(fit1)
class(shuffle$wind)
class(shuttle$wind)
class(shuttle$use)
as.numeric(shuttle$wind)
as.numeric(shuttle$use)
fit1 <- glm(use - 1 ~ wind, data = shuttle, family = binomial)
fit1 <- glm((use - 1) ~ wind, data = shuttle, family = binomial)
fit1 <- glm(use ~ wind + 1, data = shuttle, family = binomial)
summary(fit1)
use <- shuttle$use - 1
use <- as.numeric(shuttle$use) - 1
wind <- as.numeric(shuttle$wind)
fit1 <- glm(use ~ wind, family = binomial)
summary(fit1)
sum(predict(fit1) > 0)
use
wind
wind <- as.numeric(shuttle$wind) - 1
fit1 <- glm(use ~ wind, family = binomial)
summary(fit1)
data(shuttle)
use <- as.numeric(shuttle$use) - 1
wind <- as.numeric(shuttle$wind) - 1
fit1 <- glm(use ~ wind, family = binomial)
summary(fit1)
sum(predict(fit1) > 0)
table(use, wind)
sum(exp(predict(fit1)) > 0)
exp(predict(fit1))
predict(fit1)
exp(-predict(fit1))
use <- as.numeric(shuttle$use)
wind <- as.numeric(shuttle$wind)
fit1 <- glm(use ~ wind, family = binomial)
summary(fit1)
predict(fit1)
exp(-predict(fit1))
use <- as.numeric(shuttle$use) - 1
wind <- as.numeric(shuttle$wind) - 1
fit1 <- glm(use ~ wind, family = binomial)
summary(fit1)
predict(fit1)
exp(-predict(fit1))
sum(exp(predict(fit1)) > 0.5)
use <- as.numeric(shuttle$use) - 1
wind <- as.numeric(shuttle$wind) - 1
use
weind
wind
table(use, wind)
fit1 <- glm(use ~ wind, family = binomial)
summary(fit1)
predict(fit1, wind)
predict(fit1)
library(MASS)
summary(fit1)
View(shuttle)
fit1 <- glm(use ~ wind, family = binomial())
summary(fit1)
exp(coef(fit1))
predict(fit1, type = "response")
predict(fit1)
predict(fit1, type = "response")
use <- as.numeric(shuttle$use) - 1
wind <- as.numeric(shuttle$wind) - 1
fit1 <- glm(use ~ wind, family = binomial())
summary(fit1)
predict(fit1, type = "response")
data(shuttle)
fit1 <- glm(use ~ wind, data = shuttle, family = binomial())
summary(fit1)
predict(fit1, type = "response")
exp(coef(fit1))
lm（
lm（()
lm()
show()
install.packages("yhat")
install.packages("C:/Users/hostrue/Desktop/DDPQuiz3_1.0.zip", repos = NULL)
runApp()
library("shiny", lib.loc="D:/Program Files/R/R-3.1.0/library")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
training <- read.table("training.txt")
View(training)
training <- read.table("training.txt", sep = ",")
View(training)
runApp()
names(training)[3]
names(training)[3] <- "Class"
names(testing)[3] <- "Class"
testing <- read.table("testing.txt", sep = ",")
names(training)[3] <- "Class"
names(testing)[3] <- "Class"
View(training)
View(testing)
data <- read.table("data.txt", sep = ",")
names(data)[3] <- "Class"
inTrain <- createDataPartition(data$Class, p = 0.7, list = FALSE)
library(caret)
inTrain <- createDataPartition(data$Class, p = 0.7, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
View(testing)
View(training)
dataDis <- qplot(training[,-3])
qplot(training[,-3])
qplot(training[,-3], geom = "point", main = "Dataset Display")
qplot(training[,1], training[,2], geom = "point", main = "Dataset Display")
detach("package:shiny", unload=TRUE)
qplot(V1, V2, data = training,  main = "Dataset Display")
qplot(V1, V2, data = training,  color = Class, main = "Dataset Display")
data[,3] <- as.factor(data[,3])
names(data)[3] <- "Class"
inTrain <- createDataPartition(data$Class, p = 0.7, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
qplot(V1, V2, data = training,  color = Class, main = "Dataset Display")
ggplot(V1, V2, data = training) + geom_point()
ggplot(training) + geom_point()
ggplot(training, aes(V1, V2)) + geom_point()
ggplot(training, aes(V1, V2, color = Class)) + geom_point()
ggplot(training, aes(V1, V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
s
s
s
ggplot(training, aes(V1, V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
number_ticks <- function(n) {function(limits) pretty(limits, n)}
ggplot(training, aes(V1, V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
ggplot(training, aes(V1, V2, color = Class)) + geom_point() +
scale_V1_continuous(breaks=number_ticks(10)) +
scale_V2_continuous(breaks=number_ticks(10))
ggplot(training, aes(x = V1, y = V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
class(data$V1)
class(data$V2)
data <- read.table("data.txt", sep = ",", stringsAsFactors=FALSE)
data[,3] <- as.factor(data[,3])
class(data$V2)
class(data$V1)
class(data$V3)
data <- read.table("data.txt", sep = ",", stringsAsNumeric=TRUE)
data <- as.numeric(read.table("data.txt", sep = ","))
data <- read.table("data.txt", sep = ",", stringsAsFactors=FALSE)
data[,3] <- as.factor(data[,3])
names(data)[3] <- "Class"
inTrain <- createDataPartition(data$Class, p = 0.7, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
ggplot(training, aes(x = V1, y = V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
data[,-3] <- as.numeric(data[,-3])
data <- read.table("data.txt", sep = ",", colClasses = "numeric")
data[,3] <- as.factor(data[,3])
class(data[,2])
names(data)[3] <- "Class"
inTrain <- createDataPartition(data$Class, p = 0.7, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
number_ticks <- function(n) {function(limits) pretty(limits, n)}
ggplot(training, aes(x = V1, y = V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
,  color = Class, main = "Dataset Display")
runApp()
library(shiny)
runApp()
dataDis <- ggplot(training, aes(x = V1, y = V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p <- ggplot(training, aes(x = V1, y = V2, color = Class)) + geom_point() +
scale_x_continuous(breaks=number_ticks(10)) +
scale_y_continuous(breaks=number_ticks(10))
print(p)
class(print(p))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lm(y,x)
lm(V1, V2, data = training)
lm(V1~ V2, data = training)
s <- lm(V1~ V2, data = training)
s
s <- summary(s)
class(summary)
class(s)
re <- list()
re.append(1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(iris)
iris
scatterPlot(iris)
scatterplot(iris)
library("car", lib.loc="D:/Program Files/R/R-3.1.0/library")
scatterplot(iris)
scatterplotMatrix(iris)
scatterplotMatrix(~.|Species,data = iris)
p <- scatterplotMatrix(~.|Species,data = iris, legend = FALSE)
print(p)
library(shiny)
library(caret)
runApp()
class(iris)
str(iris)
class(iris)
runApp()
data$Species
data1 <- data(iris)
inTrain <- createDataPartition(data1$Species, p = 0.7, list = FALSE)
data(iris)
a<-data(iris)
data$Sepal.Length
data(iris)
inTrain <- createDataPartition(iris$Species, p = 0.7, list = FALSE)
training <- iris[inTrain, ]
runApp()
runApp()
a<-str(iris)
runApp()
runApp()
runApp()
runApp()
install.packages("shinyapps")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(
name="hostrue",
token="FC1D1065FA01E11ADD58951798D21549",
secret="shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')")
shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')
shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')
deployApp()
library("shinyapps", lib.loc="D:/Program Files/R/R-3.1.0/library")
shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')
deployApp()
shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')
shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')
deployApp()
deployApp()
deployApp(appName = "Classification-Algorithm-Demo")
deployApp(appName = "Classification-Algorithm-Demo")
deployApp(appName = "Classification-Algorithm-Demo")
deployApp(appName = "Classification-Algorithm-Demo")
deployApp(appName = "Classification-Algorithm-Demo")
deployApp(appName = "Classification-Algorithm-Demo")
deployApp()
library("shiny", lib.loc="D:/Program Files/R/R-3.1.0/library")
library("shinyapps", lib.loc="D:/Program Files/R/R-3.1.0/library")
deployApp()
shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')
shinyapps::setAccountInfo(name='hostrue', token='FC1D1065FA01E11ADD58951798D21549', secret='n3CkbUAmxOzYu4m0Gxx9yonU2ZII07ERwBQAHwzY')
deployApp()
deployApp(appName = "Classification-Algorithm-Demo")
getwd()
setwd("G:/Learn/Coursera/Data Science/09_DevelopingDataProducts/hw/slidify")
library("slidify", lib.loc="D:/Program Files/R/R-3.1.0/library")
author("Stanley")
slidify("index.Rmd")
browseURL("index.Rmd")
slidify("index.Rmd")
browseURL("index.Rmd")
slidify("index.Rmd")
browseURL("index.Rmd")
slidify("index.Rmd")
browseURL("index.Rmd")
slidify("index.Rmd")
browseURL("index.Rmd")
getwd()
slidify("index.Rmd")
browseURL("index.Rmd")
slidify("index.Rmd")
browseURL("index.Rmd")
setwd("G:/Learn/Coursera/Data Science/09_DevelopingDataProducts/hw")
runApp()
library("shiny", lib.loc="D:/Program Files/R/R-3.1.0/library")
runApp()
runApp()
runApp()
library("shinyapps", lib.loc="D:/Program Files/R/R-3.1.0/library")
runApp()
runApp()
getwd()
setwd("G:/R")
runApp()
library("shiny", lib.loc="D:/Program Files/R/R-3.1.0/library")
runApp()
library(caret)
runApp()
runApp()
library(car)
runApp()
setwd("G:/Learn/Coursera/Data Science/09_DevelopingDataProducts/hw/slidify/Stanley")
slidify("index.Rmd")
library("slidify", lib.loc="D:/Program Files/R/R-3.1.0/library")
slidify("index.Rmd")
browseURL("index.Rmd")
slidify("index.Rmd")
browseURL("index.Rmd")
publish_github(repo = "Slidify", username = "hostrue")
publish_github("hostrue", "Slidify")
publish_github("hostrue", "slidify")
publish_github("hostrue", "https://github.com/hostrue/slidify")
